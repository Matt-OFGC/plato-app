generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Ingredient {
  id                  Int                      @id @default(autoincrement())
  createdAt           DateTime                 @default(now())
  updatedAt           DateTime                 @updatedAt
  name                String
  supplier            String?
  packQuantity        Decimal
  packUnit            BaseUnit
  packPrice           Decimal
  currency            String                   @default("GBP")
  densityGPerMl       Decimal?
  notes               String?
  companyId           Int?
  allergens           String[]                 @default([])
  lastPriceUpdate     DateTime                 @default(now())
  originalUnit        Unit?
  priceHistory        String?
  supplierId          Int?
  customConversions   String?
  company             Company?                 @relation(fields: [companyId], references: [id])
  supplierRef         Supplier?                @relation(fields: [supplierId], references: [id])
  priceHistoryRecords IngredientPriceHistory[]
  recipeItems         RecipeItem[]

  @@unique([name, companyId])
  @@index([companyId])
  @@index([companyId, name])
  @@index([companyId, lastPriceUpdate])
  @@index([supplierId])
}

model Recipe {
  id                     Int                     @id @default(autoincrement())
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  name                   String
  yieldQuantity          Decimal
  yieldUnit              BaseUnit
  imageUrl               String?
  companyId              Int?
  description            String?
  method                 String?
  actualFoodCost         Decimal?
  bakeTemp               Int?
  bakeTime               Int?
  category               String?
  categoryId             Int?
  isSubRecipe            Boolean                 @default(false)
  lastPriceUpdate        DateTime?
  portionSize            Decimal?
  portionUnit            BaseUnit?
  portionsPerBatch       Int?
  sellingPrice           Decimal?
  shelfLife              String?
  shelfLifeId            Int?
  storage                String?
  storageId              Int?
  suggestedPrice         Decimal?
  customerPricing        CustomerPricing[]
  inventory              Inventory[]
  productionHistory      ProductionHistory[]
  productionItems        ProductionItem[]
  categoryRef            Category?               @relation(fields: [categoryId], references: [id])
  company                Company?                @relation(fields: [companyId], references: [id])
  shelfLifeRef           ShelfLifeOption?        @relation(fields: [shelfLifeId], references: [id])
  storageRef             StorageOption?          @relation(fields: [storageId], references: [id])
  collections            RecipeCollection[]
  items                  RecipeItem[]
  sections               RecipeSection[]
  parentRecipes          RecipeSubRecipe[]       @relation("ParentRecipe")
  subRecipes             RecipeSubRecipe[]
  versions               RecipeVersion[]
  salesRecords           SalesRecord[]
  seasonalTrends         SeasonalTrend[]
  shopifyOrderItems      ShopifyOrderItem[]
  shopifyProductMappings ShopifyProductMapping[]
  wholesaleOrderItems    WholesaleOrderItem[]
  wholesaleProducts      WholesaleProduct[]      @relation("WholesaleRecipes")

  @@unique([name, companyId])
  @@index([companyId])
  @@index([category])
  @@index([companyId, name])
  @@index([companyId, categoryId])
  @@index([companyId, updatedAt])
}

model RecipeItem {
  id           Int            @id @default(autoincrement())
  recipeId     Int
  ingredientId Int
  quantity     Decimal
  unit         Unit
  note         String?
  sectionId    Int?
  price        Decimal?
  ingredient   Ingredient     @relation(fields: [ingredientId], references: [id])
  recipe       Recipe         @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  section      RecipeSection? @relation(fields: [sectionId], references: [id])

  @@index([recipeId])
  @@index([ingredientId])
  @@index([sectionId])
}

model RecipeSection {
  id          Int          @id @default(autoincrement())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  recipeId    Int
  title       String
  description String?
  method      String?
  order       Int          @default(0)
  bakeTemp    Int?
  bakeTime    Int?
  hasTimer    Boolean      @default(false)
  items       RecipeItem[]
  recipe      Recipe       @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@index([recipeId])
  @@index([recipeId, order])
}

model RecipeSubRecipe {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  parentRecipeId Int
  subRecipeId    Int
  quantity       Decimal
  unit           Unit
  note           String?
  parentRecipe   Recipe   @relation("ParentRecipe", fields: [parentRecipeId], references: [id], onDelete: Cascade)
  subRecipe      Recipe   @relation(fields: [subRecipeId], references: [id], onDelete: Cascade)

  @@unique([parentRecipeId, subRecipeId])
  @@index([parentRecipeId])
  @@index([subRecipeId])
}

model User {
  id                         Int             @id @default(autoincrement())
  createdAt                  DateTime        @default(now())
  updatedAt                  DateTime        @updatedAt
  email                      String          @unique
  name                       String?
  passwordHash               String?
  hasCompletedOnboarding     Boolean         @default(false)
  ingredientCount            Int             @default(0)
  isActive                   Boolean         @default(true)
  isAdmin                    Boolean         @default(false)
  lastLoginAt                DateTime?
  recipeCount                Int             @default(0)
  stripeCustomerId           String?         @unique
  subscriptionEndsAt         DateTime?
  subscriptionInterval       String          @default("month")
  subscriptionStatus         String          @default("free")
  subscriptionTier           String          @default("starter")
  emailVerified              Boolean         @default(false)
  verificationToken          String?         @unique
  verificationTokenExpiresAt DateTime?
  activityLogs               ActivityLog[]
  memberships                Membership[]
  notifications              Notification[]
  subscription               Subscription?
  preferences                UserPreference?
}

model Company {
  id                     Int                     @id @default(autoincrement())
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  name                   String
  address                String?
  businessType           String?
  city                   String?
  country                String                  @default("United Kingdom")
  email                  String?
  isProfilePublic        Boolean                 @default(false)
  logoUrl                String?
  maxSeats               Int                     @default(5)
  ownerId                Int?
  phone                  String?
  postcode               String?
  pricePerSeat           Decimal                 @default(5.00)
  profileBio             String?
  seatsUsed              Int                     @default(1)
  shopifyAccessToken     String?
  shopifyApiKey          String?
  shopifyIsConnected     Boolean                 @default(false)
  shopifyLastSync        DateTime?
  shopifyStoreUrl        String?
  shopifyWebhookSecret   String?
  showContact            Boolean                 @default(true)
  showTeam               Boolean                 @default(false)
  slug                   String?                 @unique
  website                String?
  activityLogs           ActivityLog[]
  analyticsSnapshots     AnalyticsSnapshot[]
  categories             Category[]
  collections            Collection[]
  customReports          CustomReport[]
  externalMappings       ExternalMapping[]
  ingredients            Ingredient[]
  integrationConfigs     IntegrationConfig[]
  integrationSyncs       IntegrationSync[]
  inventory              Inventory[]
  leaveBalances          LeaveBalance[]
  leaveRequests          LeaveRequest[]
  memberships            Membership[]
  payrollIntegrations    PayrollIntegration[]
  payrollRuns            PayrollRun[]
  productionHistory      ProductionHistory[]
  productionPlans        ProductionPlan[]
  recipes                Recipe[]
  salesRecords           SalesRecord[]
  seasonalTrends         SeasonalTrend[]
  shelfLifeOptions       ShelfLifeOption[]
  shifts                 Shift[]
  shiftTemplates         ShiftTemplate[]
  shopifyOrders          ShopifyOrder[]
  shopifyProductMappings ShopifyProductMapping[]
  storageOptions         StorageOption[]
  suppliers              Supplier[]
  invitations            TeamInvitation[]
  timesheets             Timesheet[]
  webhookLogs            WebhookLog[]
  wholesaleCustomers     WholesaleCustomer[]
  wholesaleOrders        WholesaleOrder[]
  wholesaleProducts      WholesaleProduct[]
}

model Membership {
  id             Int            @id @default(autoincrement())
  userId         Int
  companyId      Int
  acceptedAt     DateTime?
  createdAt      DateTime       @default(now())
  invitedAt      DateTime       @default(now())
  invitedBy      Int?
  isActive       Boolean        @default(true)
  pin            String?
  pinHash        String?
  updatedAt      DateTime       @default(now()) @updatedAt
  role           MemberRole     @default(VIEWER)
  currency       String         @default("GBP")
  employmentType String?
  endDate        DateTime?
  hourlyRate     Decimal?
  niCategory     String?
  payFrequency   String?
  pensionOptIn   Boolean        @default(false)
  pensionRate    Decimal?
  salary         Decimal?
  startDate      DateTime?
  taxCode        String?
  leaveBalances  LeaveBalance[]
  leaveRequests  LeaveRequest[]
  company        Company        @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  payrollLines   PayrollLine[]
  shifts         Shift[]
  timesheets     Timesheet[]

  @@unique([userId, companyId])
  @@index([companyId])
  @@index([userId])
  @@index([companyId, pin])
}

model UserPreference {
  id              Int     @id @default(autoincrement())
  userId          Int     @unique
  currency        String  @default("GBP")
  maxFoodCost     Decimal @default(35.0)
  navigationItems Json?
  targetFoodCost  Decimal @default(25.0)
  timerSettings   Json?
  user            User    @relation(fields: [userId], references: [id])
}

model Subscription {
  id                   Int       @id @default(autoincrement())
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  userId               Int       @unique
  stripeSubscriptionId String?   @unique
  stripePriceId        String?
  stripeProductId      String?
  status               String    @default("active")
  tier                 String    @default("professional")
  price                Decimal   @default(19.00)
  currency             String    @default("GBP")
  interval             String    @default("month")
  currentPeriodStart   DateTime?
  currentPeriodEnd     DateTime?
  cancelAtPeriodEnd    Boolean   @default(false)
  canceledAt           DateTime?
  maxIngredients       Int?
  maxRecipes           Int?
  metadata             Json?
  user                 User      @relation(fields: [userId], references: [id])
}

model Category {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  description String?
  color       String?
  order       Int      @default(0)
  companyId   Int?
  company     Company? @relation(fields: [companyId], references: [id])
  recipes     Recipe[]

  @@unique([name, companyId])
  @@index([companyId])
  @@index([companyId, order])
}

model ShelfLifeOption {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  description String?
  order       Int      @default(0)
  companyId   Int?
  recipes     Recipe[]
  company     Company? @relation(fields: [companyId], references: [id])

  @@unique([name, companyId])
  @@index([companyId])
  @@index([companyId, order])
}

model Supplier {
  id              Int          @id @default(autoincrement())
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  name            String
  description     String?
  contactName     String?
  email           String?
  phone           String?
  website         String?
  deliveryDays    String[]     @default([])
  deliveryNotes   String?
  accountLogin    String?
  accountPassword String?
  accountNumber   String?
  address         String?
  city            String?
  postcode        String?
  country         String?
  currency        String?      @default("GBP")
  paymentTerms    String?
  minimumOrder    Decimal?
  companyId       Int?
  ingredients     Ingredient[]
  company         Company?     @relation(fields: [companyId], references: [id])

  @@unique([name, companyId])
  @@index([companyId])
}

model StorageOption {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  description String?
  icon        String?
  order       Int      @default(0)
  companyId   Int?
  recipes     Recipe[]
  company     Company? @relation(fields: [companyId], references: [id])

  @@unique([name, companyId])
  @@index([companyId])
  @@index([companyId, order])
}

model TeamInvitation {
  id         Int        @id @default(autoincrement())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  companyId  Int
  email      String
  role       MemberRole @default(VIEWER)
  invitedBy  Int
  token      String     @unique
  acceptedAt DateTime?
  expiresAt  DateTime
  company    Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([companyId, email])
  @@index([companyId])
  @@index([email])
}

model ProductionPlan {
  id        Int              @id @default(autoincrement())
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  name      String
  startDate DateTime
  endDate   DateTime
  notes     String?
  companyId Int
  createdBy Int
  items     ProductionItem[]
  company   Company          @relation(fields: [companyId], references: [id], onDelete: Cascade)
  tasks     ProductionTask[]

  @@index([companyId])
  @@index([startDate])
}

model ProductionItem {
  id          Int                        @id @default(autoincrement())
  createdAt   DateTime                   @default(now())
  planId      Int
  recipeId    Int
  customerId  Int?
  quantity    Decimal
  priority    Int                        @default(0)
  completed   Boolean                    @default(false)
  notes       String?
  customer    WholesaleCustomer?         @relation(fields: [customerId], references: [id])
  plan        ProductionPlan             @relation(fields: [planId], references: [id], onDelete: Cascade)
  recipe      Recipe                     @relation(fields: [recipeId], references: [id])
  allocations ProductionItemAllocation[]

  @@index([planId])
  @@index([recipeId])
  @@index([customerId])
}

model ProductionItemAllocation {
  id               Int                @id @default(autoincrement())
  createdAt        DateTime           @default(now())
  productionItemId Int
  customerId       Int?
  destination      String
  quantity         Decimal
  notes            String?
  customer         WholesaleCustomer? @relation(fields: [customerId], references: [id])
  item             ProductionItem     @relation(fields: [productionItemId], references: [id], onDelete: Cascade)

  @@index([productionItemId])
  @@index([customerId])
}

model ProductionTask {
  id          Int            @id @default(autoincrement())
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  planId      Int
  title       String
  description String?
  assignedTo  Int?
  dueDate     DateTime?
  completed   Boolean        @default(false)
  priority    Int            @default(0)
  plan        ProductionPlan @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@index([planId])
  @@index([assignedTo])
}

model WholesaleCustomer {
  id                    Int                        @id @default(autoincrement())
  createdAt             DateTime                   @default(now())
  updatedAt             DateTime                   @updatedAt
  companyId             Int
  name                  String
  contactName           String?
  email                 String?
  phone                 String?
  address               String?
  city                  String?
  postcode              String?
  country               String?
  notes                 String?
  isActive              Boolean                    @default(true)
  portalToken           String?                    @unique
  portalShortCode       String?                    @unique
  portalEnabled         Boolean                    @default(false)
  customPricing         CustomerPricing[]
  productionItems       ProductionItem[]
  productionAllocations ProductionItemAllocation[]
  company               Company                    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  orders                WholesaleOrder[]

  @@index([companyId])
  @@index([isActive])
  @@index([portalToken])
}

model WholesaleOrder {
  id                    Int                  @id @default(autoincrement())
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  customerId            Int
  companyId             Int
  orderNumber           String?
  deliveryDate          DateTime?
  status                String               @default("pending")
  notes                 String?
  isRecurring           Boolean              @default(false)
  recurringInterval     String?
  recurringIntervalDays Int?
  recurringEndDate      DateTime?
  nextRecurrenceDate    DateTime?
  recurringStatus       String?
  parentOrderId         Int?
  company               Company              @relation(fields: [companyId], references: [id], onDelete: Cascade)
  customer              WholesaleCustomer    @relation(fields: [customerId], references: [id], onDelete: Cascade)
  parentOrder           WholesaleOrder?      @relation("RecurringOrders", fields: [parentOrderId], references: [id])
  recurringOrders       WholesaleOrder[]     @relation("RecurringOrders")
  items                 WholesaleOrderItem[]

  @@index([customerId])
  @@index([companyId])
  @@index([status])
  @@index([deliveryDate])
  @@index([isRecurring])
  @@index([nextRecurrenceDate])
  @@index([recurringStatus])
  @@index([parentOrderId])
}

model WholesaleOrderItem {
  id       Int            @id @default(autoincrement())
  orderId  Int
  recipeId Int
  quantity Int
  price    Decimal?
  notes    String?
  order    WholesaleOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)
  recipe   Recipe         @relation(fields: [recipeId], references: [id])

  @@index([orderId])
  @@index([recipeId])
}

model CustomerPricing {
  id         Int               @id @default(autoincrement())
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  customerId Int
  recipeId   Int
  price      Decimal
  unit       String            @default("each")
  notes      String?
  customer   WholesaleCustomer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  recipe     Recipe            @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@unique([customerId, recipeId])
  @@index([customerId])
  @@index([recipeId])
}

model WholesaleProduct {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  companyId   Int
  recipeId    Int?
  name        String?
  description String?
  unit        String?
  price       Decimal
  currency    String   @default("GBP")
  category    String?
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  imageUrl    String?
  notes       String?
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  recipe      Recipe?  @relation("WholesaleRecipes", fields: [recipeId], references: [id], onDelete: Cascade)

  @@index([companyId])
  @@index([recipeId])
  @@index([isActive])
  @@index([category])
  @@index([companyId, isActive])
}

model ShopifyOrder {
  id                 Int                @id @default(autoincrement())
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  companyId          Int
  shopifyOrderId     String             @unique
  shopifyOrderNumber String
  customerName       String
  customerEmail      String?
  customerPhone      String?
  totalPrice         Decimal
  currency           String             @default("GBP")
  orderDate          DateTime
  fulfillmentStatus  String?
  financialStatus    String?
  shippingAddress    Json?
  deliveryDate       DateTime?
  status             String             @default("pending")
  processedAt        DateTime?
  notes              String?
  shopifyData        Json
  company            Company            @relation(fields: [companyId], references: [id], onDelete: Cascade)
  items              ShopifyOrderItem[]

  @@index([companyId])
  @@index([shopifyOrderId])
  @@index([status])
  @@index([orderDate])
}

model ShopifyOrderItem {
  id                Int          @id @default(autoincrement())
  orderId           Int
  recipeId          Int?
  shopifyProductId  String
  shopifyVariantId  String?
  productTitle      String
  variantTitle      String?
  sku               String?
  quantity          Int
  price             Decimal
  addedToProduction Boolean      @default(false)
  productionItemId  Int?
  order             ShopifyOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)
  recipe            Recipe?      @relation(fields: [recipeId], references: [id])

  @@index([orderId])
  @@index([recipeId])
  @@index([shopifyProductId])
}

model ShopifyProductMapping {
  id                 Int      @id @default(autoincrement())
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  companyId          Int
  recipeId           Int
  shopifyProductId   String
  shopifyVariantId   String?
  productTitle       String
  variantTitle       String?
  sku                String?
  quantityMultiplier Decimal  @default(1.0)
  isActive           Boolean  @default(true)
  company            Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  recipe             Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@unique([companyId, shopifyProductId, shopifyVariantId])
  @@index([companyId])
  @@index([recipeId])
  @@index([shopifyProductId])
}

model Notification {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    Int
  type      String
  title     String
  message   String
  link      String?
  read      Boolean   @default(false)
  readAt    DateTime?
  metadata  Json?
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([userId, read])
  @@index([createdAt])
}

model ActivityLog {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  userId     Int
  companyId  Int
  action     String
  entity     String
  entityId   Int?
  entityName String?
  details    Json?
  ipAddress  String?
  userAgent  String?
  company    Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([companyId])
  @@index([userId])
  @@index([companyId, createdAt])
  @@index([entity, entityId])
}

model Collection {
  id          Int                @id @default(autoincrement())
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  name        String
  description String?
  color       String?
  icon        String?
  companyId   Int
  createdBy   Int
  isPublic    Boolean            @default(false)
  company     Company            @relation(fields: [companyId], references: [id], onDelete: Cascade)
  recipes     RecipeCollection[]

  @@unique([name, companyId])
  @@index([companyId])
}

model RecipeCollection {
  id           Int        @id @default(autoincrement())
  createdAt    DateTime   @default(now())
  recipeId     Int
  collectionId Int
  order        Int        @default(0)
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  recipe       Recipe     @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@unique([recipeId, collectionId])
  @@index([collectionId])
  @@index([recipeId])
}

model RecipeVersion {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  recipeId     Int
  version      Int
  snapshot     Json
  changedBy    Int
  changeNote   String?
  totalCost    Decimal?
  sellingPrice Decimal?
  foodCostPct  Decimal?
  recipe       Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@unique([recipeId, version])
  @@index([recipeId])
  @@index([recipeId, version])
}

model Inventory {
  id                Int                 @id @default(autoincrement())
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  companyId         Int
  recipeId          Int
  quantity          Decimal             @default(0)
  unit              String
  lowStockThreshold Decimal?
  lastRestocked     DateTime?
  company           Company             @relation(fields: [companyId], references: [id], onDelete: Cascade)
  recipe            Recipe              @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  movements         InventoryMovement[]

  @@unique([companyId, recipeId])
  @@index([companyId])
  @@index([recipeId])
}

model InventoryMovement {
  id               Int       @id @default(autoincrement())
  createdAt        DateTime  @default(now())
  inventoryId      Int
  type             String
  quantity         Decimal
  productionItemId Int?
  orderId          Int?
  reason           String?
  notes            String?
  createdBy        Int
  inventory        Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)

  @@index([inventoryId])
  @@index([createdAt])
  @@index([type])
}

model Shift {
  id               Int         @id @default(autoincrement())
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  membershipId     Int
  companyId        Int
  date             DateTime
  startTime        DateTime
  endTime          DateTime
  breakDuration    Int         @default(0)
  shiftType        String      @default("general")
  location         String?
  status           String      @default("scheduled")
  productionPlanId Int?
  notes            String?
  confirmedBy      Int?
  company          Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  membership       Membership  @relation(fields: [membershipId], references: [id], onDelete: Cascade)
  timesheets       Timesheet[]

  @@index([companyId])
  @@index([membershipId])
  @@index([date])
  @@index([companyId, date])
  @@index([status])
}

model Timesheet {
  id               Int        @id @default(autoincrement())
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  membershipId     Int
  companyId        Int
  clockInAt        DateTime
  clockOutAt       DateTime?
  breakStart       DateTime?
  breakEnd         DateTime?
  totalHours       Decimal?
  breakHours       Decimal?   @default(0)
  status           String     @default("pending")
  approvedBy       Int?
  approvedAt       DateTime?
  rejectionReason  String?
  shiftId          Int?
  clockInLocation  String?
  clockOutLocation String?
  clockInIp        String?
  clockOutIp       String?
  adjustmentHours  Decimal?   @default(0)
  adjustmentReason String?
  notes            String?
  company          Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  membership       Membership @relation(fields: [membershipId], references: [id], onDelete: Cascade)
  shift            Shift?     @relation(fields: [shiftId], references: [id])

  @@index([companyId])
  @@index([membershipId])
  @@index([clockInAt])
  @@index([status])
  @@index([companyId, clockInAt])
  @@index([shiftId])
}

model LeaveRequest {
  id           Int        @id @default(autoincrement())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  membershipId Int
  companyId    Int
  leaveType    String
  startDate    DateTime
  endDate      DateTime
  isFullDay    Boolean    @default(true)
  startTime    String?
  endTime      String?
  reason       String?
  notes        String?
  status       String     @default("pending")
  reviewedBy   Int?
  reviewedAt   DateTime?
  reviewNotes  String?
  company      Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  membership   Membership @relation(fields: [membershipId], references: [id], onDelete: Cascade)

  @@index([companyId])
  @@index([membershipId])
  @@index([startDate])
  @@index([status])
  @@index([companyId, startDate])
}

model LeaveBalance {
  id            Int        @id @default(autoincrement())
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  membershipId  Int
  companyId     Int
  leaveType     String
  balance       Decimal    @default(0)
  accrualRate   Decimal?
  accrualPeriod String     @default("month")
  year          Int
  totalAccrued  Decimal    @default(0)
  totalTaken    Decimal    @default(0)
  company       Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  membership    Membership @relation(fields: [membershipId], references: [id], onDelete: Cascade)

  @@unique([membershipId, leaveType, year])
  @@index([companyId])
  @@index([membershipId])
  @@index([year])
}

model ShiftTemplate {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  companyId     Int
  name          String
  description   String?
  dayOfWeek     Int?
  startTime     String
  endTime       String
  breakDuration Int      @default(0)
  shiftType     String   @default("general")
  location      String?
  defaultRole   String?
  isActive      Boolean  @default(true)
  company       Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([companyId])
  @@index([isActive])
}

model PayrollRun {
  id               Int              @id @default(autoincrement())
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  companyId        Int
  periodStart      DateTime
  periodEnd        DateTime
  payDate          DateTime
  status           String           @default("draft")
  approvedBy       Int?
  approvedAt       DateTime?
  totalGross       Decimal          @default(0)
  totalTax         Decimal          @default(0)
  totalNI          Decimal          @default(0)
  totalPension     Decimal          @default(0)
  totalNet         Decimal          @default(0)
  notes            String?
  paymentMethod    String?
  externalId       String?
  syncedToExternal Boolean          @default(false)
  payrollLines     PayrollLine[]
  company          Company          @relation(fields: [companyId], references: [id], onDelete: Cascade)
  syncLogs         PayrollSyncLog[]

  @@index([companyId])
  @@index([periodStart])
  @@index([status])
  @@index([companyId, periodStart])
}

model PayrollLine {
  id              Int        @id @default(autoincrement())
  createdAt       DateTime   @default(now())
  payrollRunId    Int
  membershipId    Int
  hoursWorked     Decimal
  overtimeHours   Decimal    @default(0)
  hourlyRate      Decimal
  grossPay        Decimal
  taxDeduction    Decimal    @default(0)
  niDeduction     Decimal    @default(0)
  pensionAmount   Decimal    @default(0)
  otherDeductions Decimal    @default(0)
  netPay          Decimal
  breakdown       Json?
  membership      Membership @relation(fields: [membershipId], references: [id], onDelete: Cascade)
  payrollRun      PayrollRun @relation(fields: [payrollRunId], references: [id], onDelete: Cascade)

  @@unique([payrollRunId, membershipId])
  @@index([payrollRunId])
  @@index([membershipId])
}

model PayrollIntegration {
  id           Int              @id @default(autoincrement())
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  companyId    Int
  provider     String
  name         String
  apiKey       String?
  apiSecret    String?
  accessToken  String?
  refreshToken String?
  config       Json?
  isActive     Boolean          @default(true)
  autoSync     Boolean          @default(false)
  lastSyncAt   DateTime?
  nextSyncAt   DateTime?
  lastError    String?
  errorCount   Int              @default(0)
  oauthState   String?
  redirectUri  String?
  company      Company          @relation(fields: [companyId], references: [id], onDelete: Cascade)
  syncLogs     PayrollSyncLog[]

  @@unique([companyId, provider])
  @@index([companyId])
  @@index([isActive])
}

model PayrollSyncLog {
  id              Int                @id @default(autoincrement())
  createdAt       DateTime           @default(now())
  integrationId   Int
  payrollRunId    Int
  status          String
  direction       String
  recordsExported Int                @default(0)
  recordsImported Int                @default(0)
  recordsFailed   Int                @default(0)
  errorMessage    String?
  errorDetails    Json?
  syncMetadata    Json?
  integration     PayrollIntegration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  payrollRun      PayrollRun         @relation(fields: [payrollRunId], references: [id], onDelete: Cascade)

  @@index([integrationId])
  @@index([payrollRunId])
  @@index([createdAt])
}

model AnalyticsSnapshot {
  id                Int      @id @default(autoincrement())
  createdAt         DateTime @default(now())
  companyId         Int
  period            String
  periodStart       DateTime
  periodEnd         DateTime
  totalRevenue      Decimal  @default(0)
  totalCosts        Decimal  @default(0)
  grossProfit       Decimal  @default(0)
  grossMargin       Decimal  @default(0)
  recipesProduced   Int      @default(0)
  totalBatches      Decimal  @default(0)
  ingredientsUsed   Int      @default(0)
  avgIngredientCost Decimal  @default(0)
  avgFoodCost       Decimal  @default(0)
  topRecipe         String?
  topCategory       String?
  metadata          Json?
  company           Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([companyId, period, periodStart])
  @@index([companyId])
  @@index([period])
  @@index([periodStart])
  @@index([companyId, periodStart])
}

model SalesRecord {
  id              Int      @id @default(autoincrement())
  createdAt       DateTime @default(now())
  companyId       Int
  transactionDate DateTime
  channel         String
  recipeId        Int?
  productName     String?
  quantity        Decimal
  unitPrice       Decimal
  totalRevenue    Decimal
  customerId      Int?
  customerName    String?
  orderId         Int?
  notes           String?
  externalId      String?
  externalSource  String?
  company         Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  recipe          Recipe?  @relation(fields: [recipeId], references: [id])

  @@index([companyId])
  @@index([transactionDate])
  @@index([recipeId])
  @@index([channel])
  @@index([companyId, transactionDate])
  @@index([externalId])
}

model ProductionHistory {
  id               Int      @id @default(autoincrement())
  createdAt        DateTime @default(now())
  companyId        Int
  recipeId         Int
  productionDate   DateTime
  quantityProduced Decimal
  actualCost       Decimal?
  productionPlanId Int?
  batchNumber      String?
  wasteAmount      Decimal? @default(0)
  productionTime   Int?
  efficiency       Decimal?
  producedBy       Int?
  notes            String?
  metadata         Json?
  company          Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  recipe           Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@index([companyId])
  @@index([recipeId])
  @@index([productionDate])
  @@index([companyId, productionDate])
  @@index([productionPlanId])
}

model IngredientPriceHistory {
  id            Int        @id @default(autoincrement())
  createdAt     DateTime   @default(now())
  ingredientId  Int
  price         Decimal
  currency      String     @default("GBP")
  packQuantity  Decimal
  packUnit      String
  changeType    String
  previousPrice Decimal?
  supplierId    Int?
  supplierName  String?
  notes         String?
  source        String?
  ingredient    Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)

  @@index([ingredientId])
  @@index([createdAt])
  @@index([supplierId])
  @@index([ingredientId, createdAt])
}

model CustomReport {
  id                Int       @id @default(autoincrement())
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  companyId         Int
  createdBy         Int
  name              String
  description       String?
  reportType        String
  metrics           Json
  filters           Json?
  grouping          Json?
  dateRange         Json?
  isScheduled       Boolean   @default(false)
  scheduleFrequency String?
  scheduleTime      String?
  exportFormats     String[]  @default([])
  emailRecipients   String[]  @default([])
  isActive          Boolean   @default(true)
  lastRunAt         DateTime?
  company           Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([companyId, name])
  @@index([companyId])
  @@index([createdBy])
  @@index([isScheduled])
}

model SeasonalTrend {
  id               Int      @id @default(autoincrement())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  companyId        Int
  recipeId         Int?
  category         String?
  season           String
  month            Int?
  demandMultiplier Decimal
  confidence       Decimal
  dataPoints       Int
  description      String?
  notes            String?
  isActive         Boolean  @default(true)
  company          Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  recipe           Recipe?  @relation(fields: [recipeId], references: [id])

  @@unique([companyId, recipeId, season])
  @@index([companyId])
  @@index([recipeId])
  @@index([category])
  @@index([season])
}

model IntegrationConfig {
  id               Int               @id @default(autoincrement())
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  companyId        Int
  provider         String
  name             String
  credentials      Json
  authType         String
  settings         Json?
  mappings         Json?
  isActive         Boolean           @default(true)
  isConnected      Boolean           @default(false)
  lastSyncAt       DateTime?
  lastErrorAt      DateTime?
  lastError        String?
  accessToken      String?
  refreshToken     String?
  tokenExpiresAt   DateTime?
  autoSync         Boolean           @default(false)
  syncFrequency    String?
  externalMappings ExternalMapping[]
  company          Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)
  syncs            IntegrationSync[]
  webhookLogs      WebhookLog[]

  @@unique([companyId, provider])
  @@index([companyId])
  @@index([provider])
  @@index([isActive])
}

model IntegrationSync {
  id               Int               @id @default(autoincrement())
  createdAt        DateTime          @default(now())
  companyId        Int
  integrationId    Int
  syncType         String
  direction        String
  status           String
  recordsProcessed Int               @default(0)
  recordsCreated   Int               @default(0)
  recordsUpdated   Int               @default(0)
  recordsFailed    Int               @default(0)
  startedAt        DateTime
  completedAt      DateTime?
  duration         Int?
  errors           Json?
  warnings         Json?
  trigger          String?
  metadata         Json?
  company          Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)
  integration      IntegrationConfig @relation(fields: [integrationId], references: [id], onDelete: Cascade)

  @@index([companyId])
  @@index([integrationId])
  @@index([status])
  @@index([startedAt])
  @@index([companyId, startedAt])
}

model ExternalMapping {
  id            Int               @id @default(autoincrement())
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  companyId     Int
  integrationId Int
  entityType    String
  internalId    Int
  externalId    String
  externalData  Json?
  lastSyncAt    DateTime?
  isActive      Boolean           @default(true)
  company       Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)
  integration   IntegrationConfig @relation(fields: [integrationId], references: [id], onDelete: Cascade)

  @@unique([integrationId, entityType, internalId])
  @@index([companyId])
  @@index([integrationId])
  @@index([entityType])
  @@index([externalId])
}

model WebhookLog {
  id             Int                @id @default(autoincrement())
  createdAt      DateTime           @default(now())
  companyId      Int
  integrationId  Int?
  provider       String
  eventType      String
  webhookId      String?
  method         String
  headers        Json?
  body           Json?
  status         String             @default("pending")
  processedAt    DateTime?
  error          String?
  responseStatus Int?
  responseBody   Json?
  ipAddress      String?
  userAgent      String?
  company        Company            @relation(fields: [companyId], references: [id], onDelete: Cascade)
  integration    IntegrationConfig? @relation(fields: [integrationId], references: [id])

  @@index([companyId])
  @@index([integrationId])
  @@index([provider])
  @@index([eventType])
  @@index([status])
  @@index([createdAt])
}

enum BaseUnit {
  g
  ml
  each
  slices
}

enum Unit {
  g
  kg
  mg
  lb
  oz
  ml
  l
  pint
  quart
  gallon
  tsp
  tbsp
  cup
  floz
  each
  slices
  pinch
  dash
  large
  medium
  small
}

enum MemberRole {
  OWNER
  ADMIN
  EDITOR
  VIEWER
}
