// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Canonical base units used for storage and costing
enum BaseUnit {
  g      // grams
  ml     // milliliters
  each   // discrete items
  slices // slices
}

// Supported user-facing units for recipe item entry
enum Unit {
  g
  kg
  mg
  lb
  oz
  ml
  l
  pint
  quart
  gallon
  tsp
  tbsp
  cup
  floz
  each
  slices
}

model Ingredient {
  id              Int       @id @default(autoincrement())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  name            String
  supplier        String?   // Keep for backward compatibility
  supplierId      Int?      // New supplier relationship
  supplierRef     Supplier? @relation(fields: [supplierId], references: [id])

  // Purchase pack information
  packQuantity    Decimal
  packUnit        BaseUnit
  originalUnit    Unit?     // Store the original unit the user selected
  packPrice       Decimal
  currency        String    @default("GBP")

  // Density in g/ml to enable volumeâ†”mass conversions when needed
  densityGPerMl   Decimal?

  // Allergens information
  allergens       String[]  @default([]) // Array of allergen strings

  notes           String?

  company         Company?  @relation(fields: [companyId], references: [id])
  companyId       Int?

  recipeItems     RecipeItem[]

  @@unique([name, companyId])
  @@index([companyId])
}

model Recipe {
  id             Int          @id @default(autoincrement())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  name           String       @unique
  description    String?

  // Output yield
  yieldQuantity  Decimal
  yieldUnit      BaseUnit

  // Optional image URL
  imageUrl       String?

  // Method/instructions
  method         String?

  // Sub-recipe flag
  isSubRecipe    Boolean      @default(false)

  // Recipe metadata
  bakeTime       Int?         // in minutes
  bakeTemp       Int?         // in Celsius
  storage        String?      // Legacy field - will be replaced by storageId
  storageId      Int?         // Reference to StorageOption model
  shelfLife      String?      // Legacy field - will be replaced by shelfLifeId
  shelfLifeId    Int?         // Reference to ShelfLifeOption model
  category       String?      // Legacy field - will be replaced by categoryId
  categoryId     Int?         // Reference to Category model

  // Pricing & margin management
  targetMargin      Decimal?  @default(65.0) // Target profit margin %
  minMargin         Decimal?  @default(55.0) // Minimum acceptable margin %
  currentPrice      Decimal?  // What they actually charge customers
  suggestedPrice    Decimal?  // Auto-calculated from target margin
  lastPriceUpdate   DateTime? // When price was last changed

  company        Company?     @relation(fields: [companyId], references: [id])
  companyId      Int?
  
  categoryRef    Category?    @relation(fields: [categoryId], references: [id])
  storageRef     StorageOption? @relation(fields: [storageId], references: [id])
  shelfLifeRef   ShelfLifeOption? @relation(fields: [shelfLifeId], references: [id])

  items          RecipeItem[]
  sections       RecipeSection[]
  subRecipes     RecipeSubRecipe[]
  parentRecipes  RecipeSubRecipe[] @relation("ParentRecipe")

  @@index([companyId])
  @@index([category])
}

model RecipeItem {
  id            Int        @id @default(autoincrement())

  recipe        Recipe     @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId      Int

  ingredient    Ingredient @relation(fields: [ingredientId], references: [id])
  ingredientId  Int

  quantity      Decimal
  unit          Unit

  note          String?

  // Optional section assignment
  section       RecipeSection? @relation(fields: [sectionId], references: [id])
  sectionId     Int?

  @@index([recipeId])
  @@index([ingredientId])
  @@index([sectionId])
}

model RecipeSection {
  id            Int        @id @default(autoincrement())
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  recipe        Recipe     @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId      Int

  title         String
  description   String?
  method        String?
  order         Int        @default(0)

  items         RecipeItem[]

  @@index([recipeId])
  @@index([recipeId, order])
}

model RecipeSubRecipe {
  id            Int        @id @default(autoincrement())
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  parentRecipe  Recipe     @relation("ParentRecipe", fields: [parentRecipeId], references: [id], onDelete: Cascade)
  parentRecipeId Int

  subRecipe     Recipe     @relation(fields: [subRecipeId], references: [id], onDelete: Cascade)
  subRecipeId   Int

  quantity      Decimal
  unit          Unit
  note          String?

  @@index([parentRecipeId])
  @@index([subRecipeId])
  @@unique([parentRecipeId, subRecipeId])
}

model User {
  id           Int       @id @default(autoincrement())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  email        String    @unique
  name         String?
  passwordHash String?   // Made optional for Google OAuth users

  memberships  Membership[]
  preferences  UserPreference?
  
  // Subscription management
  subscription  Subscription?
  stripeCustomerId String? @unique
  subscriptionStatus String @default("free") // free, active, past_due, canceled, trialing
  subscriptionTier String @default("free") // free, pro
  subscriptionEndsAt DateTime?
  
  // Usage tracking
  ingredientCount Int @default(0)
  recipeCount Int @default(0)
  
  // Admin fields
  isAdmin Boolean @default(false)
  isActive Boolean @default(true)
  lastLoginAt DateTime?
}

model Company {
  id           Int       @id @default(autoincrement())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  name         String    @unique
  
  // Team/billing info
  ownerId      Int?      // Primary owner who manages billing
  maxSeats     Int       @default(5) // Max team members allowed
  seatsUsed    Int       @default(1) // Current team member count
  pricePerSeat Decimal   @default(5.00) // Additional cost per extra user

  ingredients  Ingredient[]
  recipes      Recipe[]
  memberships  Membership[]
  categories   Category[]
  shelfLifeOptions ShelfLifeOption[]
  storageOptions   StorageOption[]
  suppliers        Supplier[]
  invitations  TeamInvitation[]
}

enum MemberRole {
  OWNER    // Full access, can manage team, billing, and delete company
  ADMIN    // Full access to content, can manage team members
  EDITOR   // Can create and edit all content
  VIEWER   // Read-only access to all content
}

model Membership {
  id         Int        @id @default(autoincrement())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @default(now()) @updatedAt
  
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  company    Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId  Int
  role       MemberRole @default(VIEWER)
  
  // Invitation tracking
  invitedBy  Int?
  invitedAt  DateTime   @default(now())
  acceptedAt DateTime?
  
  // Status
  isActive   Boolean    @default(true)

  @@unique([userId, companyId])
  @@index([companyId])
  @@index([userId])
}

model UserPreference {
  id           Int      @id @default(autoincrement())
  user         User     @relation(fields: [userId], references: [id])
  userId       Int      @unique
  currency     String   @default("GBP")
}

model Subscription {
  id                Int       @id @default(autoincrement())
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  user              User      @relation(fields: [userId], references: [id])
  userId            Int       @unique
  
  // Stripe fields
  stripeSubscriptionId String? @unique
  stripePriceId     String?
  stripeProductId   String?
  
  // Subscription details
  status            String    @default("active") // active, canceled, past_due, trialing
  tier              String    @default("pro") // free, pro
  price             Decimal   @default(9.99)
  currency          String    @default("GBP")
  interval          String    @default("month") // month, year
  
  // Dates
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  cancelAtPeriodEnd  Boolean   @default(false)
  canceledAt         DateTime?
  
  // Usage limits
  maxIngredients     Int?      // null = unlimited
  maxRecipes         Int?      // null = unlimited
  
  // Metadata
  metadata           Json?     // Store additional Stripe metadata
}

model Category {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  name         String
  description  String?
  color        String?  // Optional color for UI
  
  company      Company? @relation(fields: [companyId], references: [id])
  companyId    Int?
  
  recipes      Recipe[]
  
  @@unique([name, companyId])
  @@index([companyId])
}

model ShelfLifeOption {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  name         String
  description  String?
  
  company      Company? @relation(fields: [companyId], references: [id])
  companyId    Int?
  
  recipes      Recipe[]
  
  @@unique([name, companyId])
  @@index([companyId])
}

model Supplier {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  name         String
  description  String?
  contactName  String?
  email        String?
  phone        String?
  website      String?
  
  // Delivery information
  deliveryDays String[] @default([]) // Array of days like ["Monday", "Wednesday", "Friday"]
  deliveryNotes String?
  
  // Account credentials (encrypted)
  accountLogin String?
  accountPassword String? // This should be encrypted in production
  accountNumber String?
  
  // Additional supplier info
  address      String?
  city         String?
  postcode     String?
  country      String?
  currency     String? @default("GBP")
  paymentTerms String?
  minimumOrder Decimal?
  
  // Company relationship
  company      Company? @relation(fields: [companyId], references: [id])
  companyId    Int?
  
  // Ingredients using this supplier
  ingredients  Ingredient[]
  
  @@unique([name, companyId])
  @@index([companyId])
}

model StorageOption {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  name         String
  description  String?
  icon         String?  // Optional icon for UI
  
  company      Company? @relation(fields: [companyId], references: [id])
  companyId    Int?
  
  recipes      Recipe[]
  
  @@unique([name, companyId])
  @@index([companyId])
}

model TeamInvitation {
  id           Int        @id @default(autoincrement())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  
  company      Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId    Int
  
  email        String
  role         MemberRole @default(VIEWER)
  
  invitedBy    Int        // User ID of person who sent invite
  token        String     @unique
  
  acceptedAt   DateTime?
  expiresAt    DateTime
  
  @@index([companyId])
  @@index([email])
  @@unique([companyId, email])
}
