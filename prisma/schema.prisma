// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Canonical base units used for storage and costing
enum BaseUnit {
  g      // grams
  ml     // milliliters
  each   // discrete items
  slices // slices
}

// Supported user-facing units for recipe item entry
enum Unit {
  g
  kg
  mg
  lb
  oz
  ml
  l
  pint
  quart
  gallon
  tsp
  tbsp
  cup
  floz
  each
  slices
}

model Ingredient {
  id              Int       @id @default(autoincrement())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  name            String
  supplier        String?   // Keep for backward compatibility
  supplierId      Int?      // New supplier relationship
  supplierRef     Supplier? @relation(fields: [supplierId], references: [id])

  // Purchase pack information
  packQuantity    Decimal
  packUnit        BaseUnit
  originalUnit    Unit?     // Store the original unit the user selected
  packPrice       Decimal
  currency        String    @default("GBP")
  
  // Price tracking
  lastPriceUpdate DateTime  @default(now()) // When price was last updated
  priceHistory    String?   // JSON array of historical prices (optional)

  // Density in g/ml to enable volume↔mass conversions when needed
  densityGPerMl   Decimal?

  // Allergens information
  allergens       String[]  @default([]) // Array of allergen strings

  notes           String?

  company         Company?  @relation(fields: [companyId], references: [id])
  companyId       Int?

  recipeItems     RecipeItem[]

  @@unique([name, companyId])
  @@index([companyId])
  @@index([companyId, name])           // Performance: Fast ingredient search
  @@index([companyId, lastPriceUpdate]) // Performance: Stale price checks
  @@index([supplierId])                // Performance: Filter by supplier
}

model Recipe {
  id             Int          @id @default(autoincrement())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  name           String       @unique
  description    String?

  // Output yield
  yieldQuantity  Decimal
  yieldUnit      BaseUnit
  
  // Portions/Servings (e.g., 1 tin = 24 slices)
  portionsPerBatch Int?      // How many servings/slices from one batch
  portionSize      Decimal?  // Size of each portion (optional)
  portionUnit      BaseUnit? // Unit for portion size

  // Optional image URL
  imageUrl       String?

  // Method/instructions
  method         String?

  // Sub-recipe flag
  isSubRecipe    Boolean      @default(false)

  // Recipe metadata
  bakeTime       Int?         // in minutes
  bakeTemp       Int?         // in Celsius
  storage        String?      // Legacy field - will be replaced by storageId
  storageId      Int?         // Reference to StorageOption model
  shelfLife      String?      // Legacy field - will be replaced by shelfLifeId
  shelfLifeId    Int?         // Reference to ShelfLifeOption model
  category       String?      // Legacy field - will be replaced by categoryId
  categoryId     Int?         // Reference to Category model

  // Pricing & food cost management
  sellingPrice      Decimal?  // What they actually charge customers
  suggestedPrice    Decimal?  // Auto-calculated from target food cost %
  actualFoodCost    Decimal?  // Calculated food cost % (cost/price * 100)
  lastPriceUpdate   DateTime? // When price was last changed

  company        Company?     @relation(fields: [companyId], references: [id])
  companyId      Int?
  
  categoryRef    Category?    @relation(fields: [categoryId], references: [id])
  storageRef     StorageOption? @relation(fields: [storageId], references: [id])
  shelfLifeRef   ShelfLifeOption? @relation(fields: [shelfLifeId], references: [id])

  items          RecipeItem[]
  sections       RecipeSection[]
  subRecipes     RecipeSubRecipe[]
  parentRecipes  RecipeSubRecipe[] @relation("ParentRecipe")
  productionItems ProductionItem[]
  collections    RecipeCollection[]
  versions       RecipeVersion[]
  wholesaleOrderItems WholesaleOrderItem[]
  shopifyOrderItems   ShopifyOrderItem[]
  shopifyProductMappings ShopifyProductMapping[]
  customerPricing     CustomerPricing[]
  inventory           Inventory[]
  wholesaleProducts   WholesaleProduct[] @relation("WholesaleRecipes")

  @@index([companyId])
  @@index([category])
  @@index([companyId, name])           // Performance: Fast recipe lookups by company
  @@index([companyId, categoryId])     // Performance: Filter by category
  @@index([companyId, updatedAt])      // Performance: Recent recipes
}

model RecipeItem {
  id            Int        @id @default(autoincrement())

  recipe        Recipe     @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId      Int

  ingredient    Ingredient @relation(fields: [ingredientId], references: [id])
  ingredientId  Int

  quantity      Decimal
  unit          Unit

  price         Decimal?   // Optional price override per unit for this recipe
  note          String?

  // Optional section assignment
  section       RecipeSection? @relation(fields: [sectionId], references: [id])
  sectionId     Int?

  @@index([recipeId])
  @@index([ingredientId])
  @@index([sectionId])
}

model RecipeSection {
  id            Int        @id @default(autoincrement())
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  recipe        Recipe     @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId      Int

  title         String
  description   String?
  method        String?
  bakeTemp      Int?       // Bake temperature in Celsius for this step
  bakeTime      Int?       // Bake time in minutes for this step
  order         Int        @default(0)

  items         RecipeItem[]

  @@index([recipeId])
  @@index([recipeId, order])
}

model RecipeSubRecipe {
  id            Int        @id @default(autoincrement())
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  parentRecipe  Recipe     @relation("ParentRecipe", fields: [parentRecipeId], references: [id], onDelete: Cascade)
  parentRecipeId Int

  subRecipe     Recipe     @relation(fields: [subRecipeId], references: [id], onDelete: Cascade)
  subRecipeId   Int

  quantity      Decimal
  unit          Unit
  note          String?

  @@index([parentRecipeId])
  @@index([subRecipeId])
  @@unique([parentRecipeId, subRecipeId])
}

model User {
  id           Int       @id @default(autoincrement())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  email        String    @unique
  name         String?
  passwordHash String?   // Made optional for Google OAuth users

  memberships  Membership[]
  preferences  UserPreference?
  notifications Notification[]
  activityLogs ActivityLog[]
  
  // Subscription management
  subscription  Subscription?
  stripeCustomerId String? @unique
  subscriptionStatus String @default("free") // free, active, past_due, canceled, trialing
  subscriptionTier String @default("starter") // starter, professional, team, business
  subscriptionInterval String @default("month") // month, year
  subscriptionEndsAt DateTime?
  
  // Usage tracking
  ingredientCount Int @default(0)
  recipeCount Int @default(0)
  
  // Admin fields
  isAdmin Boolean @default(false)
  isActive Boolean @default(true)
  lastLoginAt DateTime?
  
  // Onboarding
  hasCompletedOnboarding Boolean @default(false)
}

model Company {
  id           Int       @id @default(autoincrement())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  name         String    @unique
  slug         String?   @unique // URL-friendly identifier for public profile
  
  // Business information for personalization
  businessType String?   // Restaurant, Café, Bakery, Catering, etc.
  phone        String?
  email        String?
  website      String?
  address      String?
  city         String?
  postcode     String?
  country      String    @default("United Kingdom")
  logoUrl      String?   // URL to company logo
  
  // Public profile settings
  isProfilePublic Boolean  @default(false) // Whether profile is publicly accessible
  profileBio      String?  // Short description for public profile
  showTeam        Boolean  @default(false) // Show team members on public profile
  showContact     Boolean  @default(true)  // Show contact info on public profile
  
  // Team/billing info
  ownerId      Int?      // Primary owner who manages billing
  maxSeats     Int       @default(5) // Max team members allowed
  seatsUsed    Int       @default(1) // Current team member count
  pricePerSeat Decimal   @default(5.00) // Additional cost per extra user
  
  // Shopify Integration
  shopifyStoreUrl      String?  // e.g., "mybakery.myshopify.com"
  shopifyAccessToken   String?  // Encrypted API access token
  shopifyApiKey        String?  // API Key
  shopifyWebhookSecret String?  // For verifying webhook authenticity
  shopifyIsConnected   Boolean  @default(false)
  shopifyLastSync      DateTime? // Last time orders were synced

  ingredients  Ingredient[]
  recipes      Recipe[]
  memberships  Membership[]
  categories   Category[]
  shelfLifeOptions ShelfLifeOption[]
  storageOptions   StorageOption[]
  suppliers        Supplier[]
  invitations  TeamInvitation[]
  productionPlans  ProductionPlan[]
  activityLogs ActivityLog[]
  collections  Collection[]
  wholesaleCustomers WholesaleCustomer[]
  wholesaleOrders    WholesaleOrder[]
  wholesaleProducts  WholesaleProduct[]
  shopifyOrders      ShopifyOrder[]
  shopifyProductMappings ShopifyProductMapping[]
  inventory          Inventory[]
}

enum MemberRole {
  OWNER    // Full access, can manage team, billing, and delete company
  ADMIN    // Full access to content, can manage team members
  EDITOR   // Can create and edit all content
  VIEWER   // Read-only access to all content
}

model Membership {
  id         Int        @id @default(autoincrement())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @default(now()) @updatedAt
  
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  company    Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId  Int
  role       MemberRole @default(VIEWER)
  
  // Invitation tracking
  invitedBy  Int?
  invitedAt  DateTime   @default(now())
  acceptedAt DateTime?
  
  // PIN-based authentication (for device-based login)
  pin        String?    // 4-6 digit PIN for team member access on company devices
  pinHash    String?    // Hashed version of PIN for security
  
  // Status
  isActive   Boolean    @default(true)

  @@unique([userId, companyId])
  @@index([companyId])
  @@index([userId])
  @@index([companyId, pin]) // For PIN lookup within a company
}

model UserPreference {
  id           Int      @id @default(autoincrement())
  user         User     @relation(fields: [userId], references: [id])
  userId       Int      @unique
  currency     String   @default("GBP")
  
  // Food cost percentage targets (industry standard: 25-35%)
  targetFoodCost  Decimal  @default(25.0)  // Target food cost %
  maxFoodCost     Decimal  @default(35.0)  // Maximum acceptable food cost %
  
  // Navigation preferences for floating nav bar
  navigationItems Json?  // JSON array of selected navigation items (e.g., ["dashboard", "ingredients", "recipes", "recipe-mixer"])
  
  // Timer settings for recipe timers
  timerSettings   Json?  // JSON object with timer alert preferences
}

model Subscription {
  id                Int       @id @default(autoincrement())
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  user              User      @relation(fields: [userId], references: [id])
  userId            Int       @unique
  
  // Stripe fields
  stripeSubscriptionId String? @unique
  stripePriceId     String?
  stripeProductId   String?
  
  // Subscription details
  status            String    @default("active") // active, canceled, past_due, trialing
  tier              String    @default("professional") // starter, professional, team, business
  price             Decimal   @default(19.00)
  currency          String    @default("GBP")
  interval          String    @default("month") // month, year
  
  // Dates
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  cancelAtPeriodEnd  Boolean   @default(false)
  canceledAt         DateTime?
  
  // Usage limits
  maxIngredients     Int?      // null = unlimited
  maxRecipes         Int?      // null = unlimited
  
  // Metadata
  metadata           Json?     // Store additional Stripe metadata
}

model Category {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  name         String
  description  String?
  color        String?  // Optional color for UI
  order        Int      @default(0) // Display order
  
  company      Company? @relation(fields: [companyId], references: [id])
  companyId    Int?
  
  recipes      Recipe[]
  
  @@unique([name, companyId])
  @@index([companyId])
  @@index([companyId, order])
}

model ShelfLifeOption {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  name         String
  description  String?
  order        Int      @default(0) // Display order
  
  company      Company? @relation(fields: [companyId], references: [id])
  companyId    Int?
  
  recipes      Recipe[]
  
  @@unique([name, companyId])
  @@index([companyId])
  @@index([companyId, order])
}

model Supplier {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  name         String
  description  String?
  contactName  String?
  email        String?
  phone        String?
  website      String?
  
  // Delivery information
  deliveryDays String[] @default([]) // Array of days like ["Monday", "Wednesday", "Friday"]
  deliveryNotes String?
  
  // Account credentials (encrypted)
  accountLogin String?
  accountPassword String? // This should be encrypted in production
  accountNumber String?
  
  // Additional supplier info
  address      String?
  city         String?
  postcode     String?
  country      String?
  currency     String? @default("GBP")
  paymentTerms String?
  minimumOrder Decimal?
  
  // Company relationship
  company      Company? @relation(fields: [companyId], references: [id])
  companyId    Int?
  
  // Ingredients using this supplier
  ingredients  Ingredient[]
  
  @@unique([name, companyId])
  @@index([companyId])
}

model StorageOption {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  name         String
  description  String?
  icon         String?  // Optional icon for UI
  order        Int      @default(0) // Display order
  
  company      Company? @relation(fields: [companyId], references: [id])
  companyId    Int?
  
  recipes      Recipe[]
  
  @@unique([name, companyId])
  @@index([companyId])
  @@index([companyId, order])
}

model TeamInvitation {
  id           Int        @id @default(autoincrement())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  
  company      Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId    Int
  
  email        String
  role         MemberRole @default(VIEWER)
  
  invitedBy    Int        // User ID of person who sent invite
  token        String     @unique
  
  acceptedAt   DateTime?
  expiresAt    DateTime
  
  @@index([companyId])
  @@index([email])
  @@unique([companyId, email])
}

// Production Planning / Weekly Bake List
model ProductionPlan {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  name        String   // e.g., "Week 42 Production" or "Monday Bake"
  startDate   DateTime
  endDate     DateTime
  notes       String?
  
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId   Int
  
  createdBy   Int      // User ID who created the plan
  
  items       ProductionItem[]
  tasks       ProductionTask[]
  
  @@index([companyId])
  @@index([startDate])
}

model ProductionItem {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  
  plan        ProductionPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
  planId      Int
  
  recipe      Recipe   @relation(fields: [recipeId], references: [id])
  recipeId    Int
  
  customer    WholesaleCustomer? @relation(fields: [customerId], references: [id], onDelete: SetNull)
  customerId  Int?     // Optional: which wholesale customer this is for (legacy)
  
  quantity    Decimal  // How many batches/units to make (changed to Decimal for fractional batches)
  priority    Int      @default(0) // For ordering
  completed   Boolean  @default(false)
  notes       String?
  
  allocations ProductionItemAllocation[]
  
  @@index([planId])
  @@index([recipeId])
  @@index([customerId])
}

model ProductionItemAllocation {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  
  item        ProductionItem @relation(fields: [productionItemId], references: [id], onDelete: Cascade)
  productionItemId Int
  
  customer    WholesaleCustomer? @relation(fields: [customerId], references: [id], onDelete: SetNull)
  customerId  Int?     // Optional: which wholesale customer this allocation is for
  
  destination String   // "internal", "wholesale", or custom destination name
  quantity    Decimal  // How many batches/units allocated
  notes       String?  // Notes specific to this allocation
  
  @@index([productionItemId])
  @@index([customerId])
}

model ProductionTask {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  plan        ProductionPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
  planId      Int
  
  title       String
  description String?
  assignedTo  Int?     // User ID (Membership)
  dueDate     DateTime?
  completed   Boolean  @default(false)
  priority    Int      @default(0)
  
  @@index([planId])
  @@index([assignedTo])
}

// Wholesale Customer Management
model WholesaleCustomer {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId   Int
  
  name        String   // Customer/Business name
  contactName String?  // Contact person name
  email       String?
  phone       String?
  address     String?
  city        String?
  postcode    String?
  country     String?
  
  notes       String?  // Internal notes about this customer
  isActive    Boolean  @default(true)
  
  // Portal access
  portalToken String?  @unique // Unique token for customer ordering portal
  portalShortCode String? @unique // Short URL code (e.g., "abc123" for /p/abc123)
  portalEnabled Boolean @default(false) // Whether customer can place orders via portal
  
  // Relations
  productionItems ProductionItem[]
  productionAllocations ProductionItemAllocation[]
  orders          WholesaleOrder[]
  customPricing   CustomerPricing[]
  
  @@index([companyId])
  @@index([isActive])
  @@index([portalToken])
}

// Wholesale Orders
model WholesaleOrder {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  customer    WholesaleCustomer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId  Int
  
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId   Int
  
  orderNumber String?  // Optional order reference
  deliveryDate DateTime?
  status      String   @default("pending") // "pending", "confirmed", "in_production", "ready", "delivered", "cancelled"
  notes       String?
  
  // Recurring order fields
  isRecurring         Boolean  @default(false)
  recurringInterval   String?  // "weekly", "biweekly", "monthly", "custom"
  recurringIntervalDays Int?   // For custom intervals (e.g., every 10 days)
  recurringEndDate    DateTime? // When to stop generating recurring orders
  nextRecurrenceDate  DateTime? // When the next order should be generated
  recurringStatus     String?  // "active", "paused", "cancelled"
  parentOrderId       Int?     // Reference to the original order if this is auto-generated
  parentOrder         WholesaleOrder?  @relation("RecurringOrders", fields: [parentOrderId], references: [id], onDelete: SetNull)
  recurringOrders     WholesaleOrder[] @relation("RecurringOrders")
  
  items       WholesaleOrderItem[]
  
  @@index([customerId])
  @@index([companyId])
  @@index([status])
  @@index([deliveryDate])
  @@index([isRecurring])
  @@index([nextRecurrenceDate])
  @@index([recurringStatus])
  @@index([parentOrderId])
}

model WholesaleOrderItem {
  id          Int      @id @default(autoincrement())
  
  order       WholesaleOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId     Int
  
  recipe      Recipe   @relation(fields: [recipeId], references: [id])
  recipeId    Int
  
  quantity    Int      // How many units ordered
  price       Decimal? // Price per unit at time of order
  notes       String?  // Special instructions for this item
  
  @@index([orderId])
  @@index([recipeId])
}

// Customer-specific pricing
model CustomerPricing {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  customer    WholesaleCustomer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId  Int
  
  recipe      Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId    Int
  
  price       Decimal  // Custom price for this customer
  unit        String   @default("each") // "each", "batch", etc
  notes       String?  // Pricing notes
  
  @@unique([customerId, recipeId])
  @@index([customerId])
  @@index([recipeId])
}

// Wholesale Product Catalogue
model WholesaleProduct {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId   Int
  
  // Option 1: Link to existing recipe
  recipe      Recipe?  @relation("WholesaleRecipes", fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId    Int?
  
  // Option 2: Standalone product (not linked to recipe)
  name        String?  // Product name if not linked to recipe
  description String?
  unit        String?  // e.g., "per box", "tray", "loaf"
  
  // Pricing
  price       Decimal  // Default wholesale price
  currency    String   @default("GBP")
  
  // Categorization
  category    String?  // e.g., "Cakes", "Brownies", "Savouries"
  
  // Availability
  isActive    Boolean  @default(true) // Whether currently available to order
  
  // Display order
  sortOrder   Int      @default(0)
  
  // Additional metadata
  imageUrl    String?
  notes       String?  // Internal notes
  
  @@index([companyId])
  @@index([recipeId])
  @@index([isActive])
  @@index([category])
  @@index([companyId, isActive])
}

// Shopify Integration
model ShopifyOrder {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId   Int
  
  // Shopify order details
  shopifyOrderId     String   @unique // Shopify's order ID
  shopifyOrderNumber String   // Human-readable order number (e.g., "#1001")
  customerName       String
  customerEmail      String?
  customerPhone      String?
  
  // Order info
  totalPrice         Decimal
  currency           String   @default("GBP")
  orderDate          DateTime
  fulfillmentStatus  String?  // "fulfilled", "unfulfilled", "partially_fulfilled"
  financialStatus    String?  // "paid", "pending", "refunded", etc.
  
  // Delivery info
  shippingAddress    Json?    // Full address object from Shopify
  deliveryDate       DateTime?
  
  // Processing
  status             String   @default("pending") // "pending", "processing", "completed", "cancelled"
  processedAt        DateTime?
  notes              String?
  
  // Raw Shopify data for reference
  shopifyData        Json     // Full order JSON from Shopify
  
  items              ShopifyOrderItem[]
  
  @@index([companyId])
  @@index([shopifyOrderId])
  @@index([status])
  @@index([orderDate])
}

model ShopifyOrderItem {
  id          Int      @id @default(autoincrement())
  
  order       ShopifyOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId     Int
  
  recipe      Recipe?  @relation(fields: [recipeId], references: [id], onDelete: SetNull)
  recipeId    Int?     // Null if not yet mapped to a recipe
  
  // Shopify product details
  shopifyProductId   String
  shopifyVariantId   String?
  productTitle       String
  variantTitle       String?
  sku                String?
  quantity           Int
  price              Decimal
  
  // Production tracking
  addedToProduction  Boolean  @default(false)
  productionItemId   Int?     // Link to ProductionItem if added
  
  @@index([orderId])
  @@index([recipeId])
  @@index([shopifyProductId])
}

model ShopifyProductMapping {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId   Int
  
  recipe      Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId    Int
  
  // Shopify product details
  shopifyProductId   String
  shopifyVariantId   String?
  productTitle       String
  variantTitle       String?
  sku                String?
  
  // Mapping configuration
  quantityMultiplier Decimal  @default(1.0) // If 1 Shopify order = multiple recipe batches
  isActive           Boolean  @default(true)
  
  @@unique([companyId, shopifyProductId, shopifyVariantId])
  @@index([companyId])
  @@index([recipeId])
  @@index([shopifyProductId])
}

// Notifications System
model Notification {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  
  type      String   // "price_alert", "team_invite", "mention", "task_assigned", "subscription"
  title     String
  message   String
  link      String?  // Optional link to relevant page
  
  read      Boolean  @default(false)
  readAt    DateTime?
  
  // Optional metadata
  metadata  Json?
  
  @@index([userId])
  @@index([userId, read])
  @@index([createdAt])
}

// Activity/Audit Log
model ActivityLog {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId Int
  
  action    String   // "created", "updated", "deleted", "viewed"
  entity    String   // "Recipe", "Ingredient", "User", etc.
  entityId  Int?     // ID of the affected entity
  entityName String? // Name for easier reading
  
  details   Json?    // Additional context (old/new values, etc.)
  ipAddress String?
  userAgent String?
  
  @@index([companyId])
  @@index([userId])
  @@index([companyId, createdAt])
  @@index([entity, entityId])
}

// Recipe Collections / Tags
model Collection {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  name        String
  description String?
  color       String?  // Hex color for UI
  icon        String?  // Optional emoji or icon
  
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId   Int
  
  createdBy   Int      // User ID who created
  isPublic    Boolean  @default(false) // For public business profile
  
  recipes     RecipeCollection[]
  
  @@unique([name, companyId])
  @@index([companyId])
}

model RecipeCollection {
  id           Int        @id @default(autoincrement())
  createdAt    DateTime   @default(now())
  
  recipe       Recipe     @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId     Int
  
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  collectionId Int
  
  order        Int        @default(0) // For custom ordering within collection
  
  @@unique([recipeId, collectionId])
  @@index([collectionId])
  @@index([recipeId])
}

// Recipe Version History
model RecipeVersion {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  
  recipe      Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId    Int
  
  version     Int      // Version number
  snapshot    Json     // Complete recipe data snapshot
  
  changedBy   Int      // User ID who made the change
  changeNote  String?  // Optional note about what changed
  
  // Cost tracking at this version
  totalCost   Decimal?
  sellingPrice Decimal?
  foodCostPct  Decimal?
  
  @@index([recipeId])
  @@index([recipeId, version])
  @@unique([recipeId, version])
}

// Inventory Tracking
model Inventory {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId   Int
  
  recipe      Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId    Int
  
  quantity    Decimal  @default(0) // Current stock quantity
  unit        String   // Unit of measurement (matches recipe yieldUnit)
  
  // Stock management
  lowStockThreshold Decimal? // Alert when stock falls below this
  lastRestocked     DateTime?
  
  movements   InventoryMovement[]
  
  @@unique([companyId, recipeId])
  @@index([companyId])
  @@index([recipeId])
}

model InventoryMovement {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  
  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  inventoryId Int
  
  type        String   // "production", "sale", "adjustment", "waste"
  quantity    Decimal  // Positive for additions, negative for deductions
  
  // References
  productionItemId   Int?    // Link to production item if from production
  orderId            Int?    // Link to order if from sale
  
  reason      String?  // Optional reason for adjustment/waste
  notes       String?  // Additional notes
  createdBy   Int      // User ID who made the movement
  
  @@index([inventoryId])
  @@index([createdAt])
  @@index([type])
}
